{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _taggedTemplateLiteral from \"/Users/darius/workspace/atlantis/typesense-demo/.yarn/cache/@babel-runtime-npm-7.12.5-b3edb8ee8e-64964a0fd1.zip/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/darius/workspace/atlantis/typesense-demo/client/src/components/search.component.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query searchBook($query: String!) {\\n      book(query: $query) {\\n        name\\n        author\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { gql } from '@apollo/client';\n\nvar Search = function Search() {\n  _s();\n\n  var _useState = useState(''),\n      search = _useState[0],\n      setSearch = _useState[1];\n\n  var SEARCH_BOOK = gql(_templateObject());\n\n  var _useQuery = useQuery(SEARCH_BOOK, {\n    variables: {\n      query: search\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error;\n\n  if (error) throw new Error(error.message);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: search,\n      onChange: function onChange(e) {\n        return setSearch(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data === null || data === void 0 ? void 0 : data.book.map(function (book) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [book === null || book === void 0 ? void 0 : book.name, \" and \", book === null || book === void 0 ? void 0 : book.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Search, \"WL5wPWA4j1+ZFqfqpavNc2k1+s4=\", false, function () {\n  return [useQuery];\n});\n\n_c = Search;\nexport { Search };\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/darius/workspace/atlantis/typesense-demo/client/src/components/search.component.tsx"],"names":["React","useState","useQuery","gql","Search","search","setSearch","SEARCH_BOOK","variables","query","data","error","Error","message","e","target","value","book","map","name","author"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,GAAT,QAAyB,gBAAzB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA;;AAAA,kBACSH,QAAQ,CAAC,EAAD,CADjB;AAAA,MACZI,MADY;AAAA,MACJC,SADI;;AAGnB,MAAMC,WAAW,GAAGJ,GAAH,mBAAjB;;AAHmB,kBAYKD,QAAQ,CAACK,WAAD,EAAc;AAAEC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAEJ;AAAT;AAAb,GAAd,CAZb;AAAA,MAYXK,IAZW,aAYXA,IAZW;AAAA,MAYLC,KAZK,aAYLA,KAZK;;AAcnB,MAAIA,KAAJ,EAAW,MAAM,IAAIC,KAAJ,CAAUD,KAAK,CAACE,OAAhB,CAAN;AAEX,sBACE;AAAA,4BACE;AAAO,MAAA,KAAK,EAAER,MAAd;AAAsB,MAAA,QAAQ,EAAE,kBAACS,CAAD;AAAA,eAAOR,SAAS,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA,gBACGN,IADH,aACGA,IADH,uBACGA,IAAI,CAAEO,IAAN,CAAWC,GAAX,CAAe,UAACD,IAAD;AAAA,4BACd;AAAA,qBACGA,IADH,aACGA,IADH,uBACGA,IAAI,CAAEE,IADT,WACoBF,IADpB,aACoBA,IADpB,uBACoBA,IAAI,CAAEG,MAD1B;AAAA;AAAA;AAAA;AAAA;AAAA,iBADc;AAAA,OAAf;AADH;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA,kBADF;AAYD,CA5BD;;GAAMhB,M;UAYoBF,Q;;;KAZpBE,M;AA8BN,SAASA,MAAT","sourcesContent":["import React        from 'react'\nimport { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { gql }      from '@apollo/client'\n\nconst Search = () => {\n  const [search, setSearch] = useState('')\n\n  const SEARCH_BOOK = gql`\n    query searchBook($query: String!) {\n      book(query: $query) {\n        name\n        author\n      }\n    }\n  `\n\n  const { data, error } = useQuery(SEARCH_BOOK, { variables: { query: search } })\n\n  if (error) throw new Error(error.message)\n\n  return (\n    <>\n      <input value={search} onChange={(e) => setSearch(e.target.value)} />\n      <ul>\n        {data?.book.map((book) => (\n          <li>\n            {book?.name} and {book?.author}\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport { Search }\n"]},"metadata":{},"sourceType":"module"}