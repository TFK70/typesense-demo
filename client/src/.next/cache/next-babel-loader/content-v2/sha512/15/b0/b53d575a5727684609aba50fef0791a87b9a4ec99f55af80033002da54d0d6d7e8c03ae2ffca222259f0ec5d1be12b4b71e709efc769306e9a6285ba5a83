{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/darius/workspace/atlantis/typesense-demo/client/src/components/search.component.tsx\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { gql } from '@apollo/client';\n\nconst Search = () => {\n  const {\n    0: search,\n    1: setSearch\n  } = useState('');\n  const SEARCH_BOOK = gql`\n    query searchBook($query: String!) {\n      book(query: $query) {\n        name\n        author\n      }\n    }\n  `;\n  const {\n    value,\n    loading,\n    error\n  } = useQuery(SEARCH_BOOK, {\n    variables: {\n      query: search\n    }\n  });\n  if (error) throw new Error(error.message);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: value === null || value === void 0 ? void 0 : value.book.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [book === null || book === void 0 ? void 0 : book.name, \" and \", book === null || book === void 0 ? void 0 : book.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport { Search };","map":{"version":3,"sources":["/Users/darius/workspace/atlantis/typesense-demo/client/src/components/search.component.tsx"],"names":["React","useState","useQuery","gql","Search","search","setSearch","SEARCH_BOOK","value","loading","error","variables","query","Error","message","e","target","book","map","name","author"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,GAAT,QAAoB,gBAApB;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBL,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMM,WAAW,GAAGJ,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,GAPE;AASA,QAAM;AAAEK,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA4BR,QAAQ,CAACK,WAAD,EAAc;AAAEI,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAEP;AAAT;AAAb,GAAd,CAA1C;AAEA,MAAIK,KAAJ,EAAW,MAAM,IAAIG,KAAJ,CAAUH,KAAK,CAACI,OAAhB,CAAN;AAEX,sBACE;AAAA,4BACA;AAAO,MAAA,KAAK,EAAET,MAAd;AAAsB,MAAA,QAAQ,EAAEU,CAAC,IAAIT,SAAS,CAACS,CAAC,CAACC,MAAF,CAASR,KAAV;AAA9C;AAAA;AAAA;AAAA;AAAA,YADA,eAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFE,eAKE;AAAA,gBACGA,KADH,aACGA,KADH,uBACGA,KAAK,CAAES,IAAP,CAAYC,GAAZ,CAAgBD,IAAI,iBACnB;AAAA,mBACGA,IADH,aACGA,IADH,uBACGA,IAAI,CAAEE,IADT,WACoBF,IADpB,aACoBA,IADpB,uBACoBA,IAAI,CAAEG,MAD1B;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAeD,CA/BD;;AAiCA,SAAShB,MAAT","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { gql } from '@apollo/client'\n\nconst Search = () => {\n  const [search, setSearch] = useState('')\n\n  const SEARCH_BOOK = gql`\n    query searchBook($query: String!) {\n      book(query: $query) {\n        name\n        author\n      }\n    }\n  `\n\n  const { value, loading, error } = useQuery(SEARCH_BOOK, { variables: { query: search } })\n\n  if (error) throw new Error(error.message)\n\n  return (\n    <>\n    <input value={search} onChange={e => setSearch(e.target.value)} />\n  <button>\n    Search\n  </button>\n      <ul>\n        {value?.book.map(book => (\n          <li>\n            {book?.name} and {book?.author}\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport { Search }\n"]},"metadata":{},"sourceType":"module"}